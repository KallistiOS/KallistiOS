# KallistiOS Environment Variable Settings
#
# This is a sample script for configuring and customizing your
# KOS buid environment. Modify it to suit your setup. Several 
# settings are provided with alternative values or may be enabled
# optionally. 
#
# This script is typically sourced in your current shell environment 
# (probably by .bashrc, .bash_profile, or something similar), so that
# the KOS environment is set up automatically for each shell session.
#

# Build Architecture 
# Set the major architecture you'll be building for.
# The only option here is "dreamcast" as of KOS 2.0.0.
export KOS_ARCH="dreamcast"

# Build Sub-Architecture 
# Defines the sub architecture your configuration
# is targetting or uses an existing value that
# can be set externally via your IDE.
#
# Possible subarch options include:
#  "pristine" - Dreamcast console or HKT-0120 devkit (default)
#  "naomi"    - NAOMI or NAOMI 2 arcade board
# 
if [ -z "${KOS_SUBARCH}" ] ; then
    export KOS_SUBARCH="pristine"
else
    export KOS_SUBARCH
fi

# KOS root path
export KOS_BASE="/opt/toolchains/dc/kos"

# KOS-ports path
export KOS_PORTS="${KOS_BASE}/../kos-ports"

# Make utility
export KOS_MAKE="make"

# CMake toolchain
export KOS_CMAKE_TOOLCHAIN="${KOS_BASE}/utils/cmake/dreamcast.toolchain.cmake"

# Genromfs utility
export KOS_GENROMFS="${KOS_BASE}/utils/genromfs/genromfs"

# SH compiler prefixes
export KOS_CC_BASE="/opt/toolchains/dc/sh-elf"  
export KOS_CC_PREFIX="sh-elf"

# ARM compiler prefixes
export DC_ARM_BASE="/opt/toolchains/dc/arm-eabi"
export DC_ARM_PREFIX="arm-eabi"

# Loader Utility
# Specifies the loader to be used with the "make run" targets
# in the KOS examples. Defaults to using a preconfigured version
# of dc-tool. Use one of the other options for a manual dc-tool-ip
# or dc-tool-serial configuration, remembering to change the values
# for the Dreamcast's IP address or the serial port interface.
export KOS_LOADER="dc-tool -x"				       
#export KOS_LOADER="dc-tool-ip -t 192.168.1.100 -x"
#export KOS_LOADER="dc-tool-ser -t /dev/ttyS0 -x" 

# Default Flags
# Resets build flags. You can also initialize them to some preset
# default values here if you wish.
export KOS_INC_PATHS=""
export KOS_CFLAGS=""
export KOS_CPPFLAGS=""
export KOS_LDFLAGS=""
export KOS_AFLAGS=""
export DC_ARM_LDFLAGS=""

# Optimization Level 
# Controls the baseline optimization level to use when building. 
# Typically this is -Og (debugging), -O0, -01, -02, or -03.
# NOTE: For our target, -O4 is a valid optimization level that has 
# been seen to have some performance impact as well.
export KOS_CFLAGS="${KOS_CFLAGS} -O2"

# Additional Optimizations
# Uncomment this to enable what has been found emperically to be 
# the optimal set of additional flags for release build performance 
# on the current stable toolchain.
#export KOS_CFLAGS="${KOS_CFLAGS} -freorder-blocks-algorithm=simple -flto=auto"

# Frame Pointers
# Controls whether frame pointers are emitted or not. Disabled by
# default. Enable them if you plan to use GDB for debugging. 
export KOS_CFLAGS="${KOS_CFLAGS} -fomit-frame-pointer"
#export KOS_CFLAGS="${KOS_CFLAGS} -fno-omit-frame-pointer -DFRAME_POINTERS"

# GCC Builtin Functions
# Comment out this line to enable GCC to use its own builtin implementations of 
# certain standard library functions. Under certain conditions, this can allow
# compiler-optimized implementations to replace standard function invocations.
# The downside of this is that it COULD interfere with Newlib or KOS implementations
# of these functions, and it has not been tested thoroughly to ensure compatibility. 
export KOS_CFLAGS="${KOS_CFLAGS} -fno-builtin"

# Fast Math Instructions
# Uncomment this line to enable the optimized fast-math instructions (FSSRA,
# FSCA, and FSQRT) for calculating sin/cos, inverse square root, and square roots.
# These can result in substantial performance gains for these kinds of operations;
# however, they do so at the price of accuracy and are not IEEE compliant.
# NOTE: This also requires -fno-builtin be removed from KOS_CFLAGS to take effect!
# export KOS_CFLAGS="${KOS_CFLAGS} -ffast-math -ffp-contract=fast -mfsrra -mfsca"

# KOS Debug Level
# Sets the debug level to configure KOS with. Values range from 0 to 3, with 0
# disabling all debugging and each subsequent value enabling the options from
# the previous level plus additional options.
# 
# Level 0: Disabled
# Level 1: Heap allocation debugging + validation
# Level 2: Verbose heap allocation debugging + PVR VRAM allocation debugging
# Level 3: Verbose PVR VRAM allocation debugging + VMU filesystem debugging
export KOS_CFLAGS="${KOS_CFLAGS} -DKOS_DEBUG=0"

# Filesystem Limits
# The following settings control the limits on how many files of each
# type can be open simultaneously within the filesystem, with a larger
# number requiring more runtime memory resources. 
export KOS_CFLAGS="${KOS_CFLAGS} -DFS_CD_MAX_FILES=8"
export KOS_CFLAGS="${KOS_CFLAGS} -DFS_ROMDISK_MAX_FILES=16"
export KOS_CFLAGS="${KOS_CFLAGS} -DFS_RAMDISK_MAX_FILES=8"

# Expand PATH if not already set (comment out if you don't want this done here)
if [[ ":$PATH:" != *":${KOS_CC_BASE}/bin:/opt/toolchains/dc/bin"* ]]; then
  export PATH="${PATH}:${KOS_CC_BASE}/bin:/opt/toolchains/dc/bin"
fi

# Everything else is pretty much shared. If you want to configure compiler
# options or other such things, look at this file.
. ${KOS_BASE}/environ_base.sh
